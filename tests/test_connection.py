#!/usr/bin/env python3
"""
Script de test de connexion √† l'API Binance
V√©rifie que les cl√©s API fonctionnent et affiche les informations de base
"""

import os
import sys
from datetime import datetime
from dotenv import load_dotenv
import ccxt
from colorama import init, Fore, Style

# Initialiser colorama pour les couleurs dans le terminal
init()

def print_success(message):
    """Affiche un message de succ√®s en vert"""
    print(f"{Fore.GREEN}‚úì {message}{Style.RESET_ALL}")

def print_error(message):
    """Affiche un message d'erreur en rouge"""
    print(f"{Fore.RED}‚úó {message}{Style.RESET_ALL}")

def print_info(message):
    """Affiche un message d'information en bleu"""
    print(f"{Fore.BLUE}‚Ñπ {message}{Style.RESET_ALL}")

def print_warning(message):
    """Affiche un message d'avertissement en jaune"""
    print(f"{Fore.YELLOW}‚ö† {message}{Style.RESET_ALL}")

def main():
    """Fonction principale du test de connexion"""
    
    print(f"\n{Fore.CYAN}{'='*50}")
    print("üöÄ TEST DE CONNEXION API BINANCE")
    print(f"{'='*50}{Style.RESET_ALL}\n")
    
    # Charger les variables d'environnement
    load_dotenv()
    
    # V√©rifier la pr√©sence des cl√©s API
    api_key = os.getenv('BINANCE_API_KEY')
    api_secret = os.getenv('BINANCE_API_SECRET')
    testnet = os.getenv('TESTNET', 'true').lower() == 'true'
    
    if not api_key or not api_secret:
        print_error("Les cl√©s API ne sont pas configur√©es!")
        print_info("Veuillez configurer BINANCE_API_KEY et BINANCE_API_SECRET dans le fichier .env")
        return 1
    
    print_success("Cl√©s API trouv√©es dans l'environnement")
    print_info(f"Mode: {'TESTNET' if testnet else 'PRODUCTION'}")
    
    # Afficher les premi√®res lettres des cl√©s pour v√©rification
    print_info(f"API Key commence par: {api_key[:8]}...")
    print_info(f"API Secret commence par: {api_secret[:8]}...")
    
    try:
        # Initialiser l'exchange
        if testnet:
            # Configuration sp√©ciale pour le testnet Binance
            exchange = ccxt.binance({
                'apiKey': api_key,
                'secret': api_secret,
                'enableRateLimit': True,
                'options': {
                    'defaultType': 'spot',
                    'adjustForTimeDifference': True,
                    'createMarketBuyOrderRequiresPrice': False,
                }
            })
            
            # Configuration manuelle du testnet
            exchange.set_sandbox_mode(True)
            exchange.urls['api'] = {
                'public': 'https://testnet.binance.vision/api/v3',
                'private': 'https://testnet.binance.vision/api/v3',
                'v1': 'https://testnet.binance.vision/api/v1'
            }
            
            print_info("Configuration testnet spot appliqu√©e")
            
            # Test 1: V√©rifier le statut de l'exchange
            print(f"\n{Fore.YELLOW}üì° Test de connexion...{Style.RESET_ALL}")
            try:
                # Test avec une requ√™te publique simple d'abord
                print_info("Test de connexion de base...")
                time = exchange.fetch_time()
                print_success("Connexion de base r√©ussie")
                
                # Test avec une requ√™te de ticker directe
                print_info("Tentative de r√©cup√©ration du ticker BTC/USDT...")
                response = exchange.publicGetTickerPrice({'symbol': 'BTCUSDT'})
                price = float(response['price'])
                print_success("Connexion publique r√©ussie")
                print(f"   Prix BTC/USDT: ${price:,.2f}")
                
            except ccxt.NetworkError as e:
                print_error(f"Erreur r√©seau: {str(e)}")
                print_info("D√©tails de l'erreur:")
                print_info(f"  - Type: {type(e).__name__}")
                print_info(f"  - Message: {str(e)}")
                print_info("V√©rifiez votre connexion Internet")
                return 1
            except ccxt.ExchangeError as e:
                print_error(f"Erreur d'√©change: {str(e)}")
                print_info("D√©tails de l'erreur:")
                print_info(f"  - Type: {type(e).__name__}")
                print_info(f"  - Message: {str(e)}")
                if "fapiPublic" in str(e):
                    print_info("Erreur li√©e aux futures d√©tect√©e. V√©rifiez la configuration du testnet.")
                return 1
            except KeyError as e:
                print_error(f"Erreur de configuration: {str(e)}")
                print_info("D√©tails de l'erreur:")
                print_info(f"  - Type: {type(e).__name__}")
                print_info(f"  - Message: {str(e)}")
                print_info("Probl√®me de configuration du testnet")
                return 1
            except Exception as e:
                print_error(f"Erreur inattendue: {str(e)}")
                print_info("D√©tails de l'erreur:")
                print_info(f"  - Type: {type(e).__name__}")
                print_info(f"  - Message: {str(e)}")
                import traceback
                traceback.print_exc()
                return 1
        else:
            exchange = ccxt.binance({
                'apiKey': api_key,
                'secret': api_secret,
                'enableRateLimit': True,
                'options': {
                    'adjustForTimeDifference': True,
                }
            })
            print_warning("Connexion √† Binance PRODUCTION!")
        
        # Test 2: R√©cup√©rer l'heure du serveur
        print(f"\n{Fore.YELLOW}üïê Synchronisation temporelle:{Style.RESET_ALL}")
        try:
            time = exchange.fetch_time()
            server_time = datetime.fromtimestamp(time / 1000)
            local_time = datetime.now()
            time_diff = abs((server_time - local_time).total_seconds())
            
            print(f"   Heure serveur:  {server_time.strftime('%Y-%m-%d %H:%M:%S')}")
            print(f"   Heure locale:   {local_time.strftime('%Y-%m-%d %H:%M:%S')}")
            print(f"   Diff√©rence:     {time_diff:.2f} secondes")
            
            if time_diff > 1:
                print_warning("La diff√©rence de temps est importante. Assurez-vous que votre horloge est synchronis√©e.")
            else:
                print_success("Synchronisation temporelle OK")
        except Exception as e:
            print_warning(f"Impossible de r√©cup√©rer l'heure serveur: {str(e)}")
        
        # Test 3: V√©rifier le compte et les balances
        print(f"\n{Fore.YELLOW}üí∞ V√©rification du compte...{Style.RESET_ALL}")
        try:
            # R√©cup√©rer les balances directement
            response = exchange.privateGetAccount()
            balances = response.get('balances', [])
            
            # Filtrer les balances non nulles
            non_zero_balances = [
                balance for balance in balances 
                if float(balance.get('free', 0)) > 0 or float(balance.get('locked', 0)) > 0
            ]
            
            if non_zero_balances:
                print_success(f"Authentification r√©ussie! Fonds trouv√©s ({len(non_zero_balances)} actifs)")
                print(f"\n{Fore.YELLOW}üíµ Balances du compte:{Style.RESET_ALL}")
                for balance in sorted(non_zero_balances, key=lambda x: x['asset'])[:10]:
                    asset = balance['asset']
                    free = float(balance['free'])
                    locked = float(balance['locked'])
                    total = free + locked
                    print(f"   - {asset}: {total:,.4f} (disponible: {free:,.4f})")
                    
                if len(non_zero_balances) > 10:
                    print(f"   ... et {len(non_zero_balances) - 10} autres actifs")
            else:
                print_warning("Authentification r√©ussie mais aucun fonds trouv√©")
                print_info("Les fonds testnet sont normalement attribu√©s automatiquement")
                print_info("V√©rifiez sur https://testnet.binance.vision/")
                
        except ccxt.AuthenticationError as e:
            print_error(f"Erreur d'authentification: {str(e)}")
            print_info("V√©rifiez que vos cl√©s API sont correctes et actives")
            print_info("Pour le testnet, assurez-vous d'utiliser les cl√©s du testnet")
            return 1
        except Exception as e:
            print_error(f"Erreur lors de la v√©rification du compte: {str(e)}")
            return 1
        
        # Test 4: Tester la r√©cup√©ration de donn√©es OHLCV
        print(f"\n{Fore.YELLOW}üìà Test de r√©cup√©ration des donn√©es historiques...{Style.RESET_ALL}")
        try:
            # Utiliser l'endpoint spot pour les donn√©es OHLCV
            response = exchange.publicGetKlines({
                'symbol': 'BTCUSDT',
                'interval': '1h',
                'limit': 5
            })
            
            if response:
                print_success(f"Derni√®res {len(response)} bougies horaires r√©cup√©r√©es")
                
                # Afficher la derni√®re bougie
                last_candle = response[-1]
                # Convertir le timestamp en entier avant la division
                timestamp = int(last_candle[0])
                candle_time = datetime.fromtimestamp(timestamp / 1000)
                
                # Convertir toutes les valeurs en float
                open_price = float(last_candle[1])
                high_price = float(last_candle[2])
                low_price = float(last_candle[3])
                close_price = float(last_candle[4])
                volume = float(last_candle[5])
                
                print(f"   Derni√®re bougie ({candle_time.strftime('%H:%M')}):")
                print(f"   - Open:  ${open_price:,.2f}")
                print(f"   - High:  ${high_price:,.2f}")
                print(f"   - Low:   ${low_price:,.2f}")
                print(f"   - Close: ${close_price:,.2f}")
                print(f"   - Volume: {volume:,.2f} BTC")
            else:
                print_warning("Aucune donn√©e OHLCV r√©cup√©r√©e")
        except Exception as e:
            print_warning(f"Impossible de r√©cup√©rer les donn√©es OHLCV: {str(e)}")
            print_info("D√©tails de l'erreur:")
            print_info(f"  - Type: {type(e).__name__}")
            print_info(f"  - Message: {str(e)}")
        
        # R√©sum√© final
        print(f"\n{Fore.GREEN}{'='*50}")
        print("‚úÖ TEST DE CONNEXION R√âUSSI!")
        print(f"{'='*50}{Style.RESET_ALL}")
        
        print(f"\n{Fore.CYAN}üìù Prochaines √©tapes:{Style.RESET_ALL}")
        if testnet:
            print("1. Vos fonds testnet devraient √™tre visibles ci-dessus")
            print("2. Si ce n'est pas le cas, connectez-vous sur https://testnet.binance.vision/")
        print("3. Configurez vos param√®tres de trading dans config/settings.py")
        print("4. Lancez le bot avec: python src/main.py --paper")
        
        return 0
        
    except ccxt.NetworkError as e:
        print_error(f"Erreur r√©seau: {str(e)}")
        print_info("V√©rifiez votre connexion Internet")
        return 1
    except Exception as e:
        print_error(f"Erreur inattendue: {str(e)}")
        print_info(f"Type d'erreur: {type(e).__name__}")
        import traceback
        traceback.print_exc()
        return 1

if __name__ == "__main__":
    sys.exit(main())
