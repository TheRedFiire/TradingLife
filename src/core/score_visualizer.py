"""
Visualiseur de score pour comprendre les d√©cisions de trading
G√©n√®re des repr√©sentations visuelles des scores et signaux
"""

from typing import Dict, List
import json
from datetime import datetime
from src.core.weighted_score_engine import TradingScore
from src.logger import log_info

class ScoreVisualizer:
    """Visualise les scores de trading pour une meilleure compr√©hension"""
    
    @staticmethod
    def create_score_bar(score: float, width: int = 20) -> str:
        """Cr√©e une barre de progression ASCII pour le score"""
        # Score entre -1 et 1
        normalized = (score + 1) / 2  # Convertir en 0-1
        filled = int(normalized * width)
        
        # Couleurs ASCII
        if score > 0.5:
            color = "üü©"  # Vert fort
        elif score > 0.3:
            color = "üü¢"  # Vert
        elif score > -0.3:
            color = "üü°"  # Jaune
        elif score > -0.5:
            color = "üü†"  # Orange
        else:
            color = "üî¥"  # Rouge
        
        bar = f"{color} ["
        bar += "=" * filled
        bar += " " * (width - filled)
        bar += f"] {score:+.3f}"
        
        return bar
    
    @staticmethod
    def create_signal_breakdown(trading_score: TradingScore) -> str:
        """Cr√©e une visualisation d√©taill√©e des signaux"""
        output = []
        output.append(f"\n{'='*60}")
        output.append(f"üìä ANALYSE DE SCORE - {trading_score.timestamp.strftime('%H:%M:%S')}")
        output.append(f"{'='*60}")
        
        # Score total avec barre
        output.append(f"\nüéØ Score Total: {ScoreVisualizer.create_score_bar(trading_score.total_score)}")
        output.append(f"üìà Direction: {trading_score.direction}")
        output.append(f"üí™ Confiance: {trading_score.confidence:.0%}")
        
        # Breakdown par signal
        output.append(f"\n{'‚îÄ'*60}")
        output.append("üìã D√©tail des Signaux:")
        output.append(f"{'‚îÄ'*60}")
        
        # Trier par contribution absolue
        sorted_signals = sorted(trading_score.signals, 
                              key=lambda s: abs(s.weighted_value), 
                              reverse=True)
        
        for signal in sorted_signals:
            # Ic√¥ne selon le signal
            icons = {
                'rsi': 'üìâ',
                'bollinger': 'üìä',
                'macd': 'üìà',
                'volume': 'üì¢',
                'ma_cross': '‚úÇÔ∏è',
                'momentum': 'üöÄ',
                'volatility': 'üìç'
            }
            icon = icons.get(signal.name, 'üìå')
            
            # Barre de contribution
            contrib_bar = ScoreVisualizer.create_contribution_bar(signal.weighted_value)
            
            output.append(
                f"{icon} {signal.name.upper():10} {contrib_bar} | "
                f"Poids: {signal.weight:.0%} | "
                f"Conf: {signal.confidence:.0%}"
            )
            output.append(f"   ‚Üí {signal.reason}")
            output.append("")
        
        # Recommandation
        output.append(f"{'‚îÄ'*60}")
        output.append("üí° Recommandation:")
        
        if trading_score.direction == 'STRONG_BUY':
            output.append("   ‚úÖ ACHETER MAINTENANT - Signal tr√®s fort!")
        elif trading_score.direction == 'BUY':
            output.append("   ‚úÖ Acheter - Bon signal d'entr√©e")
        elif trading_score.direction == 'STRONG_SELL':
            output.append("   ‚ùå VENDRE MAINTENANT - Signal tr√®s fort!")
        elif trading_score.direction == 'SELL':
            output.append("   ‚ùå Vendre - Signal de sortie")
        else:
            output.append("   ‚è∏Ô∏è Attendre - Pas de signal clair")
        
        output.append(f"{'='*60}\n")
        
        return "\n".join(output)
    
    @staticmethod
    def create_contribution_bar(value: float, width: int = 15) -> str:
        """Cr√©e une barre pour montrer la contribution d'un signal"""
        abs_value = abs(value)
        filled = int(abs_value * width * 2)  # *2 car value max = 0.5
        
        if value > 0:
            # Contribution positive (achat)
            bar = "+" + "‚ñ∞" * min(filled, width)
            bar = bar.ljust(width + 1)
            return f"[{bar}]"
        else:
            # Contribution n√©gative (vente)
            bar = "-" + "‚ñ∞" * min(filled, width)
            bar = bar.ljust(width + 1)
            return f"[{bar}]"
    
    @staticmethod
    def create_mini_summary(trading_score: TradingScore) -> str:
        """Cr√©e un r√©sum√© court sur une ligne"""
        # Emoji selon la direction
        emojis = {
            'STRONG_BUY': 'üü¢üü¢',
            'BUY': 'üü¢',
            'NEUTRAL': '‚ö™',
            'SELL': 'üî¥',
            'STRONG_SELL': 'üî¥üî¥'
        }
        emoji = emojis.get(trading_score.direction, '‚ùì')
        
        # Top contributeur
        top_signal = max(trading_score.signals, key=lambda s: abs(s.weighted_value))
        
        return f"{emoji} Score: {trading_score.total_score:+.3f} | {top_signal.name}: {top_signal.reason}"
    
    @staticmethod
    def create_comparison_table(scores: Dict[str, TradingScore]) -> str:
        """Compare les scores de plusieurs paires"""
        output = []
        output.append(f"\n{'='*80}")
        output.append(f"üìä COMPARAISON MULTI-PAIRES - {datetime.now().strftime('%H:%M:%S')}")
        output.append(f"{'='*80}")
        output.append(f"{'Paire':10} {'Score':>10} {'Direction':>15} {'Confiance':>12} {'Top Signal':>25}")
        output.append(f"{'-'*80}")
        
        # Trier par score absolu
        sorted_pairs = sorted(scores.items(), 
                            key=lambda x: abs(x[1].total_score), 
                            reverse=True)
        
        for symbol, score in sorted_pairs:
            # Top signal
            top_signal = max(score.signals, key=lambda s: abs(s.weighted_value))
            
            # Couleur selon la direction
            if score.direction in ['STRONG_BUY', 'BUY']:
                direction_str = f"üü¢ {score.direction}"
            elif score.direction in ['STRONG_SELL', 'SELL']:
                direction_str = f"üî¥ {score.direction}"
            else:
                direction_str = f"‚ö™ {score.direction}"
            
            output.append(
                f"{symbol:10} {score.total_score:+10.3f} {direction_str:>15} "
                f"{score.confidence:>11.0%} {top_signal.name:>25}"
            )
        
        output.append(f"{'='*80}\n")
        
        return "\n".join(output)
    
    @staticmethod
    def log_score_analysis(symbol: str, trading_score: TradingScore):
        """Log une analyse compl√®te du score"""
        if trading_score.direction != 'NEUTRAL':
            analysis = ScoreVisualizer.create_signal_breakdown(trading_score)
            log_info(f"{symbol} - Analyse de d√©cision:\n{analysis}")
        else:
            summary = ScoreVisualizer.create_mini_summary(trading_score)
            log_info(f"{symbol} - {summary}")